{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN8mzTgkjcJIpOoggM/CVrS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BO0_icY0sucL","executionInfo":{"status":"ok","timestamp":1735656490567,"user_tz":-330,"elapsed":490,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"3d071bcf-28b9-4bbc-a11a-29f0dc1a5380"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reversed String: !dlroW ,olleH\n"]}],"source":["#1.Write a code to reverse a string\n","def reverse_string(s):\n","    return s[::-1]\n","input_string = \"Hello, World!\"\n","reversed_string = reverse_string(input_string)\n","print(\"Reversed String:\", reversed_string)\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","source":["#2.Write a code to count the number of vowels in a string\n","def count_vowels(s):\n","    vowels = \"aeiouAEIOU\"\n","    count = 0\n","    for char in s:\n","        if char in vowels:\n","            count += 1\n","\n","    return count\n","input_string = \"Hello, World!\"\n","vowel_count = count_vowels(input_string)\n","print(\"Number of vowels:\", vowel_count)\n","\n"],"metadata":{"id":"-ZxTQl0ltDe5","executionInfo":{"status":"ok","timestamp":1735656598634,"user_tz":-330,"elapsed":1221,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7c455730-9ccc-4e16-b512-97f5f0a0131c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of vowels: 3\n"]}]},{"cell_type":"code","source":["#3.Write a code to check if a given string is a palindrome or not.\n","def is_palindrome(s):\n","    s = s.replace(\" \", \"\").lower()\n","    return s == s[::-1]\n","input_string = \"A man a plan a canal Panama\"\n","if is_palindrome(input_string):\n","    print(\"The string is a palindrome.\")\n","else:\n","    print(\"The string is not a palindrome.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6JYdLDXt-UN","executionInfo":{"status":"ok","timestamp":1735656620459,"user_tz":-330,"elapsed":434,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"b3dd80e6-6c52-4db3-f3ca-e4f6f8d8e687"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["The string is a palindrome.\n"]}]},{"cell_type":"code","source":["#4.Write a code to check if two given strings are anagrams of each other.\n","def are_anagrams(str1, str2):\n","    str1 = str1.replace(\" \", \"\").lower()\n","    str2 = str2.replace(\" \", \"\").lower()\n","    return sorted(str1) == sorted(str2)\n","string1 = \"Listen\"\n","string2 = \"Silent\"\n","if are_anagrams(string1, string2):\n","    print(\"The strings are anagrams.\")\n","else:\n","    print(\"The strings are not anagrams.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Sea7zuduUYc","executionInfo":{"status":"ok","timestamp":1735656646603,"user_tz":-330,"elapsed":459,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"a004310e-7d26-4dbf-dc57-df17745d97aa"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["The strings are anagrams.\n"]}]},{"cell_type":"code","source":["#5.Write a code to find all occurrences of a given substring within another string.\n","def find_all_occurrences(main_str, sub_str):\n","    indices = []\n","    index = main_str.find(sub_str)\n","\n","    while index != -1:\n","        indices.append(index)\n","        index = main_str.find(sub_str, index + 1)\n","\n","    return indices\n","main_string = \"ababcabcab\"\n","substring = \"ab\"\n","occurrences = find_all_occurrences(main_string, substring)\n","\n","print(\"Occurrences found at indices:\", occurrences)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TVLAsotfujHr","executionInfo":{"status":"ok","timestamp":1735656671851,"user_tz":-330,"elapsed":424,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"d9f29d16-7509-49f2-bfec-974ee4a383a7"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Occurrences found at indices: [0, 2, 5, 8]\n"]}]},{"cell_type":"code","source":["#6.Write a code to perform basic string compression using the counts of repeated characters.\n","def compress_string(s):\n","    if len(s) == 0:\n","        return \"\"\n","    compressed = []\n","    count = 1\n","\n","    for i in range(1, len(s)):\n","        if s[i] == s[i - 1]:\n","            count += 1\n","        else:\n","            compressed.append(s[i - 1] + str(count))\n","            count = 1\n","    compressed.append(s[-1] + str(count))\n","    compressed_string = ''.join(compressed)\n","\n","    return compressed_string if len(compressed_string) < len(s) else s\n","input_string = \"aaabbbcccaa\"\n","compressed_string = compress_string(input_string)\n","print(\"Compressed String:\", compressed_string)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nVVhLfYWuu-s","executionInfo":{"status":"ok","timestamp":1735656779359,"user_tz":-330,"elapsed":500,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"78f6d2f4-d0bb-4b8e-be20-0a6c1044ca6d"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Compressed String: a3b3c3a2\n"]}]},{"cell_type":"code","source":["#7.Write a code to determine if a string has all unique characters.\n","def has_unique_characters(s):\n","    return len(set(s)) == len(s)\n","input_string = \"abcdef\"\n","if has_unique_characters(input_string):\n","    print(\"The string has all unique characters.\")\n","else:\n","    print(\"The string does not have all unique characters.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l59OEnu-u9yI","executionInfo":{"status":"ok","timestamp":1735656793917,"user_tz":-330,"elapsed":421,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"3c0ceb89-c7c2-40b9-a69c-6196b0d03354"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["The string has all unique characters.\n"]}]},{"cell_type":"code","source":["#8.Write a code to convert a given string to uppercase or lowercase.\n","def convert_case(s, to_upper=True):\n","    if to_upper:\n","        return s.upper()\n","    else:\n","        return s.lower()\n","input_string = \"Hello, World!\"\n","\n","# Convert to uppercase\n","upper_string = convert_case(input_string, to_upper=True)\n","print(\"Uppercase:\", upper_string)\n","\n","# Convert to lowercase\n","lower_string = convert_case(input_string, to_upper=False)\n","print(\"Lowercase:\", lower_string)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Agz12diDvJNm","executionInfo":{"status":"ok","timestamp":1735656813789,"user_tz":-330,"elapsed":423,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"2d51d642-7ba4-4fc4-acfd-e9f6e4ddde6c"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Uppercase: HELLO, WORLD!\n","Lowercase: hello, world!\n"]}]},{"cell_type":"code","source":["#9.Write a code to count the number of words in a string.\n","input_string = \"Hello, how are you today?\"\n","word_count = count_words(input_string)\n","print(\"Number of words:\", word_count)\n","def count_words(s):\n","    words = s.split()\n","    return len(words)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uUCna6NkvZox","executionInfo":{"status":"ok","timestamp":1735656848189,"user_tz":-330,"elapsed":425,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"2274bf1c-98ea-45e2-da9b-860359846564"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of words: 5\n"]}]},{"cell_type":"code","source":["#10.Write a code to concatenate two strings without using the + operator.\n","def concatenate_strings(str1, str2):\n","    return str1.join([str2])\n","string1 = \"Hello\"\n","string2 = \"World\"\n","result = concatenate_strings(string1, string2)\n","print(\"Concatenated String:\", result)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0lSfR4fnvkTP","executionInfo":{"status":"ok","timestamp":1735656906551,"user_tz":-330,"elapsed":427,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"1d7f2b7f-5cc5-40b4-ca29-f8f5e3a1a71e"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Concatenated String: World\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"U6PnoFZ8vxML","executionInfo":{"status":"ok","timestamp":1735656926513,"user_tz":-330,"elapsed":415,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["#11. Write a code to remove all occurrences of a specific element from a list.\n","def remove_element(lst, element):\n","    return [item for item in lst if item != element]\n","input_list = [1, 2, 3, 4, 2, 5, 2, 6]\n","element_to_remove = 2\n","updated_list = remove_element(input_list, element_to_remove)\n","print(\"Updated List:\", updated_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FmkVYIXdLuUj","executionInfo":{"status":"ok","timestamp":1735656981306,"user_tz":-330,"elapsed":718,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"3bf8fe45-d93e-49dd-a4bd-3ebbe54d6507"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Updated List: [1, 3, 4, 5, 6]\n"]}]},{"cell_type":"code","source":["#12.Implement a code to find the second largest number in a given list of integers.\n","input_list = [10, 20, 4, 45, 99, 20, 99]\n","result = second_largest(input_list)\n","if result is not None:\n","    print(\"Second largest number:\", result)\n","else:\n","    print(\"There is no second largest number.\")\n","def second_largest(nums):\n","    unique_nums = set(nums)\n","    if len(unique_nums) < 2:\n","        return None\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uH7YbI9sN73E","executionInfo":{"status":"ok","timestamp":1735657066335,"user_tz":-330,"elapsed":441,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"ed36fede-d0de-4485-ae8d-c3f0517c124b"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Second largest number: 45\n"]}]},{"cell_type":"code","source":["#13.Create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values.\n","\n","def count_occurrences(lst):\n","    count_dict = {}\n","    for item in lst:\n","        if item in count_dict:\n","            count_dict[item] += 1\n","        else:\n","            count_dict[item] = 1\n","\n","    return count_dict\n","input_list = [1, 2, 2, 3, 4, 2, 5, 3, 3]\n","result = count_occurrences(input_list)\n","print(\"Occurrences:\", result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FR0d3tifOHYw","executionInfo":{"status":"ok","timestamp":1735657176370,"user_tz":-330,"elapsed":522,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"30c18253-72ab-4726-f826-841b5ca7ab46"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Occurrences: {1: 1, 2: 3, 3: 3, 4: 1, 5: 1}\n"]}]},{"cell_type":"code","source":["#`14.Write a code to reverse a list in-place without using any built-in reverse functions.\n","def reverse_list(lst):\n","    start = 0\n","    end = len(lst) - 1\n","\n","    while start < end:\n","        lst[start], lst[end] = lst[end], lst[start]\n","        start += 1\n","        end -= 1\n","\n","    return lst\n","input_list = [1, 2, 3, 4, 5]\n","reversed_list = reverse_list(input_list)\n","print(\"Reversed List:\", reversed_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SFvxUEJxOmpu","executionInfo":{"status":"ok","timestamp":1735657243039,"user_tz":-330,"elapsed":500,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"e0e7572e-242e-4edc-ee57-eea2c693e486"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Reversed List: [5, 4, 3, 2, 1]\n"]}]},{"cell_type":"code","source":["#15. Implement a code to find and remove duplicates from a list while preserving the original order of elements\n","def remove_duplicates(lst):\n","    seen = set()\n","    result = []\n","\n","    for item in lst:\n","        if item not in seen:\n","            result.append(item)\n","            seen.add(item)\n","\n","    return result\n","input_list = [1, 2, 2, 3, 4, 2, 5, 3, 3]\n","result = remove_duplicates(input_list)\n","print(\"List without duplicates:\", result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"52SUxemRO4rm","executionInfo":{"status":"ok","timestamp":1735657402467,"user_tz":-330,"elapsed":417,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"e48b7d72-4688-48f9-aa3f-b3d61f420e94"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["List without duplicates: [1, 2, 3, 4, 5]\n"]}]},{"cell_type":"code","source":["#16.Create a code to check if a given list is sorted (either in ascending or descending order) or not.\n","input_list = [1, 2, 3, 4, 5]\n","result = is_sorted(input_list)\n","print(\"The list is:\", result)\n","\n","input_list2 = [5, 4, 3, 2, 1]\n","result2 = is_sorted(input_list2)\n","print(\"The list is:\", result2)\n","\n","input_list3 = [1, 3, 2, 4, 5]\n","result3 = is_sorted(input_list3)\n","print(\"The list is:\", result3)\n","def is_sorted(lst):\n","    if lst == sorted(lst):\n","        return \"Ascending order\"\n","    elif lst == sorted(lst, reverse=True):\n","        return \"Descending order\"\n","\n","    else:\n","        return \"Not sorted\"\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B0OWWrA9PFYv","executionInfo":{"status":"ok","timestamp":1735657648520,"user_tz":-330,"elapsed":514,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"f434e45e-fdae-4116-db26-d484c90c5c43"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["The list is: Ascending order\n","The list is: Descending order\n","The list is: Not sorted\n"]}]},{"cell_type":"code","source":["#17.Write a code to merge two sorted lists into a single sorted list.\n","def merge_sorted_lists(list1, list2):\n","    merged_list = []\n","    i, j = 0, 0  # Pointers for list1 and list2\n","    while i < len(list1) and j < len(list2):\n","        if list1[i] < list2[j]:\n","            merged_list.append(list1[i])\n","            i += 1\n","        else:\n","            merged_list.append(list2[j])\n","            j += 1\n","    while i < len(list1):\n","        merged_list.append(list1[i])\n","        i += 1\n","    while j < len(list2):\n","        merged_list.append(list2[j])\n","        j += 1\n","\n","    return merged_list\n","list1 = [1, 3, 5, 7]\n","list2 = [2, 4, 6, 8]\n","merged_list = merge_sorted_lists(list1, list2)\n","print(\"Merged List:\", merged_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y1JJTUexQMhO","executionInfo":{"status":"ok","timestamp":1735657749588,"user_tz":-330,"elapsed":517,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"e5cf9f27-a6ba-40ef-ebb2-7bd697eacd5b"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Merged List: [1, 2, 3, 4, 5, 6, 7, 8]\n"]}]},{"cell_type":"code","source":["#18.Implement a code to find the intersection of two given lists.\n","def find_intersection(list1, list2):\n","    set1 = set(list1)\n","    set2 = set(list2)\n","    intersection = set1.intersection(set2)\n","    return list(intersection)\n","list1 = [1, 2, 3, 4, 5]\n","list2 = [3, 4, 5, 6, 7]\n","intersection = find_intersection(list1, list2)\n","print(\"Intersection:\", intersection)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q8NWZFAXQuPc","executionInfo":{"status":"ok","timestamp":1735657852398,"user_tz":-330,"elapsed":523,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"ca5f47fa-34b9-4282-f635-581a63f24a77"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Intersection: [3, 4, 5]\n"]}]},{"cell_type":"code","source":["#19.Create a code to find the union of two lists without duplicates.\n","def find_union(list1, list2):\n","    set1 = set(list1)\n","    set2 = set(list2)\n","    union = set1.union(set2)\n","    return list(union)\n","\n","list1 = [1, 2, 3, 4, 5]\n","list2 = [3, 4, 5, 6, 7]\n","union = find_union(list1, list2)\n","print(\"Union:\", union)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oJV29k4zRJHj","executionInfo":{"status":"ok","timestamp":1735657893756,"user_tz":-330,"elapsed":407,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"a1703930-984a-400e-9904-8ec0191a469b"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Union: [1, 2, 3, 4, 5, 6, 7]\n"]}]},{"cell_type":"code","source":["#20.Write a code to shuffle a given list randomly without using any built-in shuffle functions.\n","import random\n","\n","def shuffle_list(lst):\n","    for i in range(len(lst)):\n","        j = random.randint(0, len(lst) - 1)\n","        lst[i], lst[j] = lst[j], lst[i]\n","\n","    return lst\n","input_list = [1, 2, 3, 4, 5]\n","shuffled_list = shuffle_list(input_list)\n","print(\"Shuffled List:\", shuffled_list)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f863O5UTRYd0","executionInfo":{"status":"ok","timestamp":1735657973739,"user_tz":-330,"elapsed":722,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"bb27c48f-1cfa-4a59-f94a-4fd7235486c2"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Shuffled List: [1, 5, 4, 2, 3]\n"]}]},{"cell_type":"code","source":["#21.Write a code that takes two tuples as input and returns a new tuple containing elements that are common to both input tuples.\n","def intersection_of_tuples(set1, set2):\n","    common_elements = set(set1) & set(set2)\n","    return tuple(common_elements)\n","set1 = (1, 2, 3, 4, 5)\n","set2 = (4, 5, 6, 7, 8)\n","result = intersection_of_tuples(set1, set2)\n","print(\"Common elements in both tuples:\", result)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SBkrn6bxRpH7","executionInfo":{"status":"ok","timestamp":1735658122448,"user_tz":-330,"elapsed":5,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"13595d94-ab3e-47dc-e92c-6bb311ec2b02"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Common elements in both tuples: (4, 5)\n"]}]},{"cell_type":"code","source":["#22.Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the intersection of these two sets.\n","set1_input = input(\"Enter the first set of integers separated by commas: \")\n","set2_input = input(\"Enter the second set of integers separated by commas: \")\n","set1 = set(map(int, set1_input.split(',')))\n","set2 = set(map(int, set2_input.split(',')))\n","intersection = set1.intersection(set2)\n","print(\"Intersection of the two sets:\", intersection)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jhxhd9vSR2aW","executionInfo":{"status":"ok","timestamp":1735658215807,"user_tz":-330,"elapsed":52081,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"fc22c3b3-f93d-48e5-fca0-a9c68f7da7a4"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first set of integers separated by commas: 1,2,3,4,5\n","Enter the second set of integers separated by commas: 4,5,6,7,8\n","Intersection of the two sets: {4, 5}\n"]}]},{"cell_type":"code","source":["#23.Write a code to concatenate two tuples. The function should take two tuples as input and return a new tuple containing elements from both input tuples.\n","def concatenate_tuples(tuple1, tuple2):\n","    new_tuple = tuple1 + tuple2\n","    return new_tuple\n","    tuple1 = (1, 2, 3)\n","tuple2 = (4, 5, 6)\n","result = concatenate_tuples(tuple1, tuple2)\n","print(\"Concatenated Tuple:\", result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gjjPgIsNSclb","executionInfo":{"status":"ok","timestamp":1735658269165,"user_tz":-330,"elapsed":433,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"626ecccc-464f-4a4e-812e-405bdf26a624"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Concatenated Tuple: (1, 2, 3, 4, 5, 4, 5, 6)\n"]}]},{"cell_type":"code","source":["#24.Develop a code that prompts the user to input two sets of strings. Then, print the elements that are present in the first set but not in the second set.\n","set1_input = input(\"Enter the first set of strings separated by commas: \")\n","set2_input = input(\"Enter the second set of strings separated by commas: \")\n","set1 = set(set1_input.split(','))\n","set2 = set(set2_input.split(','))\n","result = set1.difference(set2)\n","print(\"Elements in the first set but not in the second set:\", result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hXT5memZSxpy","executionInfo":{"status":"ok","timestamp":1735658379696,"user_tz":-330,"elapsed":20431,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"c0488cf0-2e1a-43db-ade9-f52e1bae2167"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first set of strings separated by commas: 1,2,3,4,5,6,7\n","Enter the second set of strings separated by commas: 9,8,7,6,5,4,3\n","Elements in the first set but not in the second set: {'1', '2'}\n"]}]},{"cell_type":"code","source":["#25.Create a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices.\n","def slice_tuple(input_tuple, start_index, end_index):\n","    return input_tuple[start_index:end_index]\n","\n","def main():\n","    input_tuple = tuple(map(int, input(\"Enter a tuple of integers (separated by commas): \").split(',')))\n","    start_index = int(input(\"Enter the start index: \"))\n","    end_index = int(input(\"Enter the end index: \"))\n","    result = slice_tuple(input_tuple, start_index, end_index)\n","    print(\"New tuple with elements in the specified index range:\", result)\n","main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":315},"id":"y1gjLDXuTBgf","executionInfo":{"status":"error","timestamp":1735658879634,"user_tz":-330,"elapsed":165344,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"d4a2ed23-799c-4b98-8a9d-087572b3950f"},"execution_count":65,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a tuple of integers (separated by commas): abcde\n"]},{"output_type":"error","ename":"ValueError","evalue":"invalid literal for int() with base 10: 'abcde'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-65-25138d61d0c2>\u001b[0m in \u001b[0;36m<cell line: 21>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# Run the main function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-65-25138d61d0c2>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;31m# Take a tuple as input (convert comma-separated input into a tuple)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0minput_tuple\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter a tuple of integers (separated by commas): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;31m# Take two integers for the range of indices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'abcde'"]}]},{"cell_type":"code","source":["#26. Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets.\n","def get_set_from_input(prompt):\n","    user_input = input(prompt)\n","    return set(user_input)\n","\n","def main():\n","    set1 = get_set_from_input(\"Enter the first set of characters: \")\n","    set2 = get_set_from_input(\"Enter the second set of characters: \")\n","\n","    union = set1 | set2\n","    print(\"Union of the two sets:\", union)\n","\n","main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"srh48mECTfkb","executionInfo":{"status":"ok","timestamp":1735658896668,"user_tz":-330,"elapsed":11476,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"ec8ed096-820e-4cad-b1a9-edeae9000011"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first set of characters: abcde\n","Enter the second set of characters: defgh\n","Union of the two sets: {'a', 'c', 'f', 'h', 'b', 'g', 'e', 'd'}\n"]}]},{"cell_type":"code","source":["#27.Develop a code that takes a tuple of integers as input. The function should return the maximum and minimum values from the tuple using tuple unpacking\n","def find_max_min(input_tuple):\n","    max_val = max(input_tuple)\n","    min_val = min(input_tuple)\n","    return max_val, min_val\n","\n","def main():\n","    input_tuple = tuple(map(int, input(\"Enter a tuple of integers (separated by commas): \").split(',')))\n","    max_val, min_val = find_max_min(input_tuple)\n","    print(\"Maximum value:\", max_val)\n","    print(\"Minimum value:\", min_val)\n","\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HuY7oaueVIha","executionInfo":{"status":"ok","timestamp":1735659298867,"user_tz":-330,"elapsed":67801,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"30f38bc7-beda-4aea-de48-5782ba82e4c4"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a tuple of integers (separated by commas): 10,20,30,40,50,60,150\n","Maximum value: 150\n","Minimum value: 10\n"]}]},{"cell_type":"code","source":["#28.Create a code that defines two sets of integers. Then, print the union, intersection, and difference of these two sets.\n","def main():\n","    set1 = {1, 2, 3, 4, 5}\n","    set2 = {4, 5, 6, 7, 8}\n","    union_set = set1 | set2\n","    print(\"Union of the two sets:\", union_set)\n","    intersection_set = set1 & set2\n","    print(\"Intersection of the two sets:\", intersection_set)\n","    difference_set = set1 - set2\n","    print(\"Difference (set1 - set2):\", difference_set)\n","    difference_set2 = set2 - set1\n","    print(\"Difference (set2 - set1):\", difference_set2)\n","main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F32LamMpVfxV","executionInfo":{"status":"ok","timestamp":1735659409506,"user_tz":-330,"elapsed":542,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"6194f57c-e53d-48e8-89d0-204fd1c0262d"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["Union of the two sets: {1, 2, 3, 4, 5, 6, 7, 8}\n","Intersection of the two sets: {4, 5}\n","Difference (set1 - set2): {1, 2, 3}\n","Difference (set2 - set1): {8, 6, 7}\n"]}]},{"cell_type":"code","source":["#29.Write a code that takes a tuple and an element as input. The function should return the count of occurrences of the given element in the tuple.\n","def count_occurrences(input_tuple, element):\n","    return input_tuple.count(element)\n","\n","def main():\n","    input_tuple = tuple(map(int, input(\"Enter a tuple of integers (separated by commas): \").split(',')))\n","    element = int(input(\"Enter the element to count: \"))\n","    count = count_occurrences(input_tuple, element)\n","    print(f\"The element {element} appears {count} time(s) in the tuple.\")\n","main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KeH56XsdXA9g","executionInfo":{"status":"ok","timestamp":1735659593402,"user_tz":-330,"elapsed":18842,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"91d98abd-b64f-4d9d-bc42-09d953784c79"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a tuple of integers (separated by commas): 1,2,3,4,5,4,4,4\n","Enter the element to count: 4\n","The element 4 appears 4 time(s) in the tuple.\n"]}]},{"cell_type":"code","source":["#30. Develop a code that prompts the user to input two sets of strings. Then, print the symmetric difference of these two sets.\n","def get_set_from_input(prompt):\n","    user_input = input(prompt)\n","    return set(user_input.split(','))\n","\n","def main():\n","    set1 = get_set_from_input(\"Enter the first set of strings (separated by commas): \")\n","    set2 = get_set_from_input(\"Enter the second set of strings (separated by commas): \")\n","    symmetric_difference = set1 ^ set2\n","\n","    print(\"Symmetric difference of the two sets:\", symmetric_difference)\n","\n","main()\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fHTHL50OXVay","executionInfo":{"status":"ok","timestamp":1735659759070,"user_tz":-330,"elapsed":77422,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"2f77c63a-f9fb-424e-b61c-4d8512a63ca5"},"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first set of strings (separated by commas): apple,banna,orange\n","Enter the second set of strings (separated by commas): banna, grapes,orange\n","Symmetric difference of the two sets: {'apple', ' grapes'}\n"]}]},{"cell_type":"code","source":["#31.Write a code that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the frequencies of those words in the input list.\n","def word_frequencies(word_list):\n","    frequency_dict = {}\n","    for word in word_list:\n","        if word in frequency_dict:\n","            frequency_dict[word] += 1\n","        else:\n","            frequency_dict[word] = 1\n","\n","    return frequency_dict\n","\n","def main():\n","    word_list = input(\"Enter a list of words (separated by commas): \").split(',')\n","    word_list = [word.strip() for word in word_list]\n","    frequency_dict = word_frequencies(word_list)\n","    print(\"Word frequencies:\", frequency_dict)\n","main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Td65FVnDYKEC","executionInfo":{"status":"ok","timestamp":1735659913380,"user_tz":-330,"elapsed":23454,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"fd16ab04-6b6d-4ff4-a70e-f53034bb13e7"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a list of words (separated by commas): dog,dog,cat,bat,cat,car\n","Word frequencies: {'dog': 2, 'cat': 2, 'bat': 1, 'car': 1}\n"]}]},{"cell_type":"code","source":["#32.Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are common keys, the values should be added together.\n","def merge_dictionaries(dict1, dict2):\n","    merged_dict = dict1.copy()\n","    for key, value in dict2.items():\n","        if key in merged_dict:\n","            merged_dict[key] += value\n","        else:\n","            merged_dict[key] = value\n","\n","    return merged_dict\n","\n","def main():\n","    dict1 = eval(input(\"Enter the first dictionary: \"))\n","    dict2 = eval(input(\"Enter the second dictionary: \"))\n","    result = merge_dictionaries(dict1, dict2)\n","    print(\"Merged dictionary:\", result)\n","\n","main()\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kXuDRPROYx04","executionInfo":{"status":"ok","timestamp":1735660354672,"user_tz":-330,"elapsed":16545,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"2b8f17ab-77f5-47fe-b89b-8e6900a7de5f"},"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first dictionary: {'b': 3, 'c': 4, 'd': 5}\n","Enter the second dictionary: {'a': 1, 'b': 2, 'c': 3}\n","Merged dictionary: {'b': 5, 'c': 7, 'd': 5, 'a': 1}\n"]}]},{"cell_type":"code","source":["#33. Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the function should return None.\n","def access_nested_dict(nested_dict, keys):\n","    for key in keys:\n","        if key in nested_dict:\n","            nested_dict = nested_dict[key]\n","        else:\n","            return None\n","    return nested_dict\n","\n","def main():\n","    nested_dict = {\n","        'a': {\n","            'b': {\n","                'c': 10\n","            },\n","            'd': 20\n","        },\n","        'e': 30\n","    }\n","\n","    keys = input(\"Enter the list of keys (separated by commas): \").split(',')\n","\n","    keys = [key.strip() for key in keys]\n","    result = access_nested_dict(nested_dict, keys)\n","    if result is not None:\n","        print(\"The value is:\", result)\n","    else:\n","        print(\"Key not found!\")\n","main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"67zlU5p-ZPSf","executionInfo":{"status":"ok","timestamp":1735660614401,"user_tz":-330,"elapsed":16636,"user":{"displayName":"Shivakant Paswan","userId":"03649194980158481076"}},"outputId":"502f95db-86b2-4cef-a8f6-e15a287a727e"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the list of keys (separated by commas): a,b,c\n","The value is: 10\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"AdLAZBzJbu9J"},"execution_count":null,"outputs":[]}]}